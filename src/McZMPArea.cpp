#include "McDynamicStability/McZMPArea.h"

#include "McDynamicStability/Utils.h"

namespace mc_impact
{

// Repeat static constexpr declarations
// See also https://stackoverflow.com/q/8016780
template<typename Point>
constexpr double McZMPArea<Point>::LOWER_SLOPE;

template<typename Point>
constexpr double McZMPArea<Point>::UPPER_SLOPE;

template<typename Point>
constexpr int McZMPArea<Point>::GM_SIZE;

template<typename Point>
constexpr int McZMPArea<Point>::RM_SIZE;
template<typename Point>
McZMPArea<Point>::McZMPArea(const mc_rbdyn::Robot & robot,
                            std::shared_ptr<McContactSet> contactSetPtr,
                            const McZMPAreaParams & mcZMPAreaParams)
: robot_(robot), contactsPtr_(contactSetPtr), McZMPAreaParams_(mcZMPAreaParams)
{
  // pdPtr_ = std::make_shared<McPolytopeDescriptor>();
  pdPtr_.reset(new McPolytopeDescriptor());

  // Fill in the initial values:
  polygonVertices_.emplace_back(-0.15, 0.12);
  polygonVertices_.emplace_back(-0.15, -0.12);
  polygonVertices_.emplace_back(0.15, -0.12);
  polygonVertices_.emplace_back(0.15, 0.12);

  // Initialize the vairables.
  updateMcZMPArea(2.0);

  std::cout << "McZMPArea is created." << std::endl;
}

template<typename Point>
void McZMPArea<Point>::updateMcZMPArea(double height)
{

  // Update the contacts (the grasp matrices will be updated):
  contactsPtr_->update(getRobot());

  // Update the Multi-contact ZMP area:
  computeMcZMPArea_(height);
}

template<typename Point>
void McZMPArea<Point>::computeMcZMPArea_(double height)
{
  assert(getContactSet()->getContactMap().size() > 0);
  int numContact = static_cast<int>(getContactSet()->getContactMap().size());
  int rowCWC = static_cast<int>(getContactSet()->getContactMap().begin()->second.contactWrenchCone().rows());
  int colCWC = static_cast<int>(getContactSet()->getContactMap().begin()->second.contactWrenchCone().cols());

  double mass = getRobot().mass(); // The result does not depend on the mass.
  Eigen::MatrixXd G;
  G.resize(GM_SIZE, GM_SIZE * numContact);
  G.setZero();

  // Polytope:
  // Eigen::MatrixXd F; ///< Inequality constraint of the Halfspace representation of the polytope
  // Eigen::VectorXd b;

  // Eigen::MatrixXd & F = pdPtr_->getA();

  pdPtr_->getF().resize(numContact * rowCWC + 4, numContact * colCWC + 2);
  pdPtr_->getF().setZero();

  // Eigen::VectorXd & b = pdPtr_->getB();
  // b.resize(numContact * colCWC);
  pdPtr_->getf().resize(numContact * rowCWC + 4);
  pdPtr_->getf().setZero();

  int count = 0;
  for(auto & contactPair : getContactSet()->getContactMap())
  {
    // Eigen::Matrix6d tempGraspMatrix;
    // contactPair.second.calcGeometricGraspMatrix(tempGraspMatrix, getRobot()); // Gives the same result.
    // contactPair.second.calcGraspMatrix(tempGraspMatrix, getRobot());

    pdPtr_->getF().block(count * rowCWC, count * colCWC, rowCWC, colCWC) =
        contactPair.second.contactWrenchCone() * contactPair.second.getGraspMatrix();

    G.block<GM_SIZE, GM_SIZE>(0, count * GM_SIZE).setIdentity();
    count++;
  }

  //  hard-coded matrices when there are leftFoot and rightHand contacts:
  /* pdPtr_->getF().block(0,0, numContact * rowCWC, numContact * colCWC)<<
                                                                           1.00004223e+00, -8.39840090e-04,
   -4.94888704e-01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00, 0.00000000e+00,
   0.00000000e+00,  0.00000000e+00,  0.00000000e+00, -9.99957583e-01, -1.68368013e-03, -4.95057570e-01,  0.00000000e+00,
   0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
   0.00000000e+00, -3.79378928e-04,  9.98734902e-01, -4.97522313e-01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
   0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00, 4.64027902e-04,
   -1.00125842e+00, -4.92423961e-01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00, 0.00000000e+00,
   0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00, 5.55804446e-06, -1.65250808e-04, -6.50065133e-02,
   9.99999907e-01,  4.21920019e-04,  8.44331097e-05,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
   0.00000000e+00,  0.00000000e+00, 5.55804446e-06, -1.66137440e-04, -6.49930639e-02, -9.99999907e-01, -4.21920019e-04,
   -8.44331097e-05,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00, 0.00000000e+00,
                                                                           1.07040932e-05, -3.05896844e-04,
   -1.20044782e-01, -4.21703415e-04,  9.99996662e-01, -2.54917621e-03,  0.00000000e+00,  0.00000000e+00, 0.00000000e+00,
   0.00000000e+00,  0.00000000e+00,  0.00000000e+00, 9.81791716e-06, -3.05896844e-04, -1.19954438e-01,  4.21703415e-04,
   -9.99996662e-01,  2.54917621e-03,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00, 0.00000000e+00,
   0.00000000e+00, 6.49638106e-02,  1.19838551e-01, -9.18447557e-02, -4.94680460e-01, -4.97731075e-01, -9.98776762e-01,
   0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00, 6.50654581e-02,
   -1.20160648e-01, -9.12776715e-02, -4.95097925e-01,  4.92215114e-01, -1.00130032e+00,  0.00000000e+00, 0.00000000e+00,
   0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00, -6.50361773e-02,  1.19784140e-01, -9.18623891e-02,
   4.95268942e-01, -4.97313395e-01, -9.98693177e-01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
   0.00000000e+00,  0.00000000e+00, -6.49345299e-02, -1.20215059e-01, -9.12953050e-02,  4.94851477e-01,  4.92632794e-01,
   -1.00121673e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00, 0.00000000e+00,
                                                                          -6.49485892e-02, -1.20305841e-01,
   -9.12439297e-02, -4.94851477e-01, -4.92632794e-01,  1.00121673e+00,  0.00000000e+00,  0.00000000e+00, 0.00000000e+00,
   0.00000000e+00,  0.00000000e+00,  0.00000000e+00, -6.50493594e-02,  1.19693358e-01, -9.19004501e-02, -4.95268942e-01,
   4.97313395e-01,  9.98693177e-01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
   0.00000000e+00, 6.50513988e-02, -1.20250552e-01, -9.12396105e-02,  4.95097925e-01, -4.92215114e-01,  1.00130032e+00,
   0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00, 6.49506286e-02,
   1.19748647e-01, -9.18961309e-02,  4.94680460e-01,  4.97731075e-01,  9.98776762e-01,  0.00000000e+00,  0.00000000e+00,
   0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00, 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
   0.00000000e+00,  0.00000000e+00,  0.00000000e+00, -4.11644291e-02,  1.02694087e+00, -4.34393752e-01,  0.00000000e+00,
   0.00000000e+00,  0.00000000e+00, 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
   0.00000000e+00, -3.65458326e-01, -9.46361406e-01, -4.64586161e-01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
                                                                           0.00000000e+00,  0.00000000e+00,
   0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00, -1.10052483e+00,  1.81335707e-01, -3.10236383e-02,
   0.00000000e+00,  0.00000000e+00,  0.00000000e+00, 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
   0.00000000e+00,  0.00000000e+00,  6.93902072e-01, -1.00756239e-01, -8.67956275e-01,  0.00000000e+00,  0.00000000e+00,
   0.00000000e+00, 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
   -1.64300404e-02,  6.65102473e-01, -3.25261897e-02,  1.62146949e-01,  9.86651140e-01,  1.50962041e-02, 0.00000000e+00,
   0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00, -1.64300404e-02, -6.58590669e-01,
   -4.01223580e-02, -1.62146949e-01, -9.86651140e-01, -1.50962041e-02, 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
   0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  5.77206618e-01,  4.88385324e-03, -1.72932081e-02, -8.97213449e-01,
   1.41045973e-01,  4.18466318e-01, 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
   0.00000000e+00, -6.26496740e-01,  4.88385324e-03, -9.16796135e-02,  8.97213449e-01, -1.41045973e-01, -4.18466318e-01,
                                                                           0.00000000e+00,  0.00000000e+00,
   0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00, -2.62237781e-01, -2.82874160e-01, -3.95268202e-02,
   -4.69116559e-02, -4.76784039e-01, -1.12270935e+00, 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
   0.00000000e+00,  0.00000000e+00,  4.41230598e-01, -2.99799677e-01, -5.29233863e-02, -9.35107656e-01, -3.37155649e-01,
   -7.08448827e-01, 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
   -2.75209537e-01,  2.93388427e-01, -3.69746050e-02,  1.13605634e-01,  4.99950757e-01, -1.10776487e+00, 0.00000000e+00,
   0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  4.28258842e-01,  2.76462910e-01,
   -5.03711711e-02, -7.74590366e-01,  6.39579147e-01, -6.93504347e-01, 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
   0.00000000e+00,  0.00000000e+00,  0.00000000e+00, -3.74227260e-01, -3.64262571e-01, -9.09504747e-02,  7.74590366e-01,
   -6.39579147e-01,  6.93504347e-01, 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
   0.00000000e+00,  1.13909891e-01, -3.47337055e-01, -3.91512440e-03, -1.13605634e-01, -4.99950757e-01,  1.10776487e+00,
                                                                           0.00000000e+00,  0.00000000e+00,
   0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00, -3.61255504e-01,  3.69864198e-01, -8.59828669e-02,
   9.35107656e-01,  3.37155649e-01,  7.08448827e-01, 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
   0.00000000e+00,  0.00000000e+00,  1.26881647e-01,  3.86789715e-01,  1.05248343e-03,  4.69116559e-02, 4.76784039e-01,
   1.12270935e+00;

   */

  // These lines are added to limit the maximum search range.
  pdPtr_->getF().bottomRightCorner(4, 2)(0, 0) = 1.0;
  pdPtr_->getF().bottomRightCorner(4, 2)(1, 0) = -1.0;
  pdPtr_->getF().bottomRightCorner(4, 2)(2, 1) = 1.0;
  pdPtr_->getF().bottomRightCorner(4, 2)(3, 1) = -1.0;

  pdPtr_->getf().tail(4).setOnes();
  pdPtr_->getf().tail(4) = pdPtr_->getf().tail(4) * 100000;

  ///-------------Part: Equality constraint: C X = d

  int assumptionSize = 4;
  // Update the matrices according to the LIPM assumptions:
  /* (1) z acceleration = 0.0
   * (2) zero angular momentum.
   */
  if(!getParams().useLIPMAssumptions)
  {
    assumptionSize = 0;
  }

  pdPtr_->getA().resize(assumptionSize + 2, GM_SIZE * numContact + 2);
  pdPtr_->getA().setZero();
  pdPtr_->getB().resize(assumptionSize + 2);
  pdPtr_->getB().setZero();

  if(getParams().useLIPMAssumptions)
  {
    updateLIPMAssumptions_(numContact, G);
  }

  ///-------------Part: Projection E X = f
  /*
   * The equality constraints that specify the projection: polytope -> polygon (on the surface).
   */

  // This is the Matrix E:
  if (getParams().useSpatialVectorAlgebra)
  {
    pdPtr_->getA().block(assumptionSize, 0, 2, GM_SIZE * numContact) =
      (height - getRobot().com().z()) / (mass * 9.81) * G.block(3, 0, 2, GM_SIZE * numContact);

  }
  else
  {
    pdPtr_->getA().block(assumptionSize, 0, 2, GM_SIZE * numContact) =
      (height - getRobot().com().z()) / (mass * 9.81) * G.block(0, 0, 2, GM_SIZE * numContact);
  }
  // Move the varialbes to the same side:
  pdPtr_->getA().block<2, 2>(assumptionSize, GM_SIZE * numContact) = -Eigen::Matrix2d::Identity();

  // This is the Vector f:
  pdPtr_->getB().tail<2>() << -getRobot().com().x(), -getRobot().com().y();

  //------------------------ We hard-coded the building blocks for a single-contact case for debugging purposes.
  // clang-format off

  /*
    pdPtr_->getF().resize(numContact * rowCWC + 4, numContact * colCWC + 2);
    pdPtr_->getF().setZero();
    pdPtr_->getf().resize(numContact * rowCWC + 4);
    pdPtr_->getf().setZero();



    pdPtr_->getF()<<
    1.00005630e+00, -8.35276168e-04, -4.94860272e-01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00, 0.00000000e+00,
   0.00000000e+00, -9.99943513e-01, -1.65727323e-03, -4.95086077e-01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
   0.00000000e+00,  0.00000000e+00, -3.54317128e-04,  9.98750471e-01, -4.97491076e-01,  0.00000000e+00,  0.00000000e+00,
   0.00000000e+00,  0.00000000e+00,  0.00000000e+00, 4.67108777e-04, -1.00124302e+00, -4.92455273e-01,  0.00000000e+00,
   0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00, 7.40589016e-06,  9.31449418e-04, -1.44648894e-01,
   9.99999909e-01,  4.10998530e-04,  1.12902285e-04,  0.00000000e+00,  0.00000000e+00, 7.40589016e-06, -1.25877058e-03,
   1.46493065e-02, -9.99999909e-01, -4.10998530e-04, -1.12902285e-04,  0.00000000e+00,  0.00000000e+00, -1.08143759e-03,
   -3.02142614e-04, -1.03085019e-01, -4.10712952e-04,  9.99996746e-01, -2.51790171e-03,  0.00000000e+00, 0.00000000e+00,
    1.10878241e-03, -3.02142614e-04, -1.36914219e-01,  4.10712952e-04, -9.99996746e-01,  2.51790171e-03, 0.00000000e+00,
   0.00000000e+00, 1.45152294e-01,  1.02339112e-01, -6.08128536e-02, -4.94657473e-01, -4.97694425e-01, -9.98806410e-01,
   0.00000000e+00,  0.00000000e+00, 1.44166761e-01, -1.37660107e-01, -4.34639575e-02, -4.95064058e-01,  4.92251847e-01,
   -1.00129901e+00,  0.00000000e+00,  0.00000000e+00, 1.51523054e-02,  1.03369786e-01, -1.39676117e-01,  4.95291931e-01,
   -4.97287557e-01, -9.98694642e-01,  0.00000000e+00,  0.00000000e+00, 1.41667729e-02, -1.36629433e-01, -1.22327221e-01,
   4.94885346e-01,  4.92658715e-01, -1.00118724e+00,  0.00000000e+00,  0.00000000e+00, -1.44047324e-01, -1.03884337e-01,
   -6.02232345e-02, -4.94885346e-01, -4.92658715e-01,  1.00118724e+00,  0.00000000e+00,  0.00000000e+00, -1.45229998e-01,
   1.36114882e-01, -4.40829312e-02, -4.95291931e-01,  4.97287557e-01,  9.98694642e-01,  0.00000000e+00,  0.00000000e+00,
   -1.40473353e-02, -1.02746804e-01, -1.39057143e-01,  4.95064058e-01, -4.92251847e-01,  1.00129901e+00, 0.00000000e+00,
   0.00000000e+00, -1.52300100e-02,  1.37252415e-01, -1.22916840e-01,  4.94657473e-01,  4.97694425e-01,  9.98806410e-01,
   0.00000000e+00,  0.00000000e+00, 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
   0.00000000e+00,  1.00000000e+00,  0.00000000e+00, 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
   0.00000000e+00,  0.00000000e+00, -1.00000000e+00,  0.00000000e+00, 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
   0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  1.00000000e+00, 0.00000000e+00,  0.00000000e+00,
   0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00, -1.00000000e+00;


   pdPtr_->getf()<<
        0.,
        0.,
        0.,
        0.,
        0.,
        0.,
        0.,
        0.,
        0.,
        0.,
        0.,
        0.,
        0.,
        0.,
        0.,
        0.,
   100000.,
   100000.,
   100000.,
   100000.;

    pdPtr_->getA().resize(assumptionSize + 2, GM_SIZE * numContact + 2);
    pdPtr_->getA().setZero();
    pdPtr_->getB().resize(assumptionSize + 2);
    pdPtr_->getB().setZero();


    pdPtr_->getA()<<
   -1.89616533e-03, -7.78228838e-07,  4.08390802e-05, -9.96827709e-07,  2.42705875e-03, -6.11111527e-06, 0.00000000e+00,
   0.00000000e+00, 7.77688096e-07, -1.89615934e-03,  1.98081340e-04, -2.42706643e-03, -9.97520823e-07, -2.74021371e-07,
   0.00000000e+00,  0.00000000e+00, -2.15740143e-07,  4.76757778e-06,  1.89350158e-03,  0.00000000e+00,  0.00000000e+00,
   0.00000000e+00,  0.00000000e+00,  0.00000000e+00, -1.93202545e-04,  6.42846204e-05, -5.84817269e-08, -2.76532139e-07,
   6.11100217e-06,  2.42705894e-03,  0.00000000e+00,  0.00000000e+00, -2.96062543e-03, -1.21681281e-06, -3.34261407e-07,
   0.00000000e+00,  0.00000000e+00,  0.00000000e+00, -1.00000000e+00,  0.00000000e+00, 1.21596732e-06, -2.96061606e-03,
   7.45456451e-06,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00, -1.00000000e+00;

    pdPtr_->getB()<<
    9.57196e-03,
   -4.97186e-05,
    7.80163e-01,
    0.00000e+00,
   -9.57196e-03,
    4.97186e-05;

    */
  // clang-format on

  //------------------------ We hard-coded the building blocks for a triple-contact case for debugging purposes.
  /*
  // clang-format off

    pdPtr_->getF().resize(numContact * rowCWC + 4, numContact * colCWC + 2);
    pdPtr_->getF().setZero();
    pdPtr_->getf().resize(numContact * rowCWC + 4);
    pdPtr_->getf().setZero();

    pdPtr_->getF()<<
  1.00029949e+00, -2.75452591e-04, -3.52705064e-01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
 -9.99699413e-01, -1.51400536e-03, -3.54399198e-01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
 -3.17093958e-04,  9.99101877e-01, -3.56083331e-01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
  9.17167100e-04, -1.00089134e+00, -3.51020931e-01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
  5.51610524e-05, -1.63815745e-04, -6.50672366e-02,  9.99999449e-01,  6.19276387e-04,  8.47066938e-04,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
  5.51610524e-05, -1.65172097e-04, -6.49323003e-02, -9.99999449e-01, -6.19276387e-04, -8.47066938e-04,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
  1.02511615e-04, -3.03681085e-04, -1.20042387e-01, -6.17130529e-04,  9.99996606e-01, -2.53119985e-03,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
  1.01159963e-04, -3.03681085e-04, -1.19956758e-01,  6.17130529e-04, -9.99996606e-01,  2.53119985e-03,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
  6.50487691e-02,  1.19916886e-01, -6.56168382e-02, -3.52486376e-01, -3.56301814e-01, -9.99401007e-01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
  6.51973583e-02, -1.20082299e-01, -6.50396245e-02, -3.52922753e-01,  3.50802568e-01, -1.00119084e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
 -6.49511593e-02,  1.19836860e-01, -6.57746641e-02,  3.54620016e-01, -3.55863919e-01, -9.98802040e-01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
 -6.48025701e-02, -1.20162325e-01, -6.51974503e-02,  3.54183639e-01,  3.51240462e-01, -1.00059187e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
 -6.49382335e-02, -1.20248416e-01, -6.51194689e-02, -3.54183639e-01, -3.51240462e-01,  1.00059187e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
 -6.50858669e-02,  1.19750770e-01, -6.57572311e-02, -3.54620016e-01,  3.55863919e-01,  9.98802040e-01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
  50e-02, -1.20167430e-01, -6.50570574e-02,  3.52922753e-01, -3.50802568e-01,  1.00119084e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
  6.49140615e-02,  1.19831755e-01, -6.56948196e-02,  3.52486376e-01,  3.56301814e-01,  9.99401007e-01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  9.99980205e-01,  4.90383009e-04, -3.53609035e-01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00, -1.00001974e+00,  9.51440502e-04, -3.53496275e-01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  2.10876091e-04,  1.00071881e+00, -3.51513622e-01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00, -2.50410367e-04, -9.99276983e-01, -3.55591688e-01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00, -3.63414413e-06,  1.32292807e-04, -6.50043636e-02,  9.99999972e-01, -2.30528747e-04, -5.63800843e-05,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00, -3.63414413e-06,  1.32783220e-04, -6.49953660e-02, -9.99999972e-01,  2.30528747e-04,  5.63800843e-05,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00, -6.95451745e-06,  2.44685564e-04, -1.19962414e-01,  2.30643229e-04,  9.99997895e-01,  2.03903342e-03,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00, -6.46386089e-06,  2.44685564e-04, -1.20037087e-01, -2.30643229e-04, -9.99997895e-01, -2.03903342e-03,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  6.50285665e-02,  1.20080882e-01, -6.51778318e-02, -3.53690835e-01, -3.51432096e-01, -1.00069889e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  6.49730386e-02, -1.19918613e-01, -6.56407989e-02, -3.53527746e-01,  3.55673197e-01, -9.99257079e-01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00, -6.49714299e-02,  1.20110677e-01, -6.51736835e-02,  3.53415926e-01, -3.51595104e-01, -1.00073876e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00, -6.50269577e-02, -1.19888818e-01, -6.56366506e-02,  3.53579015e-01,  3.55510188e-01, -9.99296946e-01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00, -6.50357068e-02, -1.19813971e-01, -6.56598704e-02, -3.53579015e-01, -3.55510188e-01,  9.99296946e-01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00, -6.49805259e-02,  1.20185524e-01, -6.51441014e-02, -3.53415926e-01,  3.51595104e-01,  1.00073876e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  6.49642895e-02, -1.19844113e-01, -6.56703809e-02,  3.53527746e-01, -3.55673197e-01,  9.99257079e-01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  6.50194704e-02,  1.20155382e-01, -6.51546120e-02,  3.53690835e-01,  3.51432096e-01,  1.00069889e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  2.75178357e-01,  5.07277193e-01, -8.89913884e-01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00, -6.15202955e-01,  1.11821713e-01,  8.56750389e-01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  5.85349750e-01,  7.50385965e-01,  4.68280444e-01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00, -9.25374348e-01, -1.31287059e-01, -5.01443939e-01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00, -3.12563809e-02,  2.42189765e-01, -3.39872636e-01,  4.45190656e-01,  1.97727740e-01, -8.73332136e-01,  0.00000000e+00,  0.00000000e+00,
  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00, -3.12563809e-02, -1.28369816e-01,  3.33775601e-01, -4.45190656e-01, -1.97727740e-01,  8.73332136e-01,  0.00000000e+00,  0.00000000e+00,
  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00, -7.65512319e-01,  1.05064568e-01,  1.09249882e-01,  7.55362049e-01,  4.40836512e-01,  4.84862191e-01,  0.00000000e+00,  0.00000000e+00,
  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  6.50104143e-01,  1.05064568e-01, -1.20505946e-01, -7.55362049e-01, -4.40836512e-01, -4.84862191e-01,  0.00000000e+00,  0.00000000e+00,
  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  5.23836059e-01, -1.49927324e-01,  7.68190838e-02, -9.05326878e-01,  6.49771512e-01,  9.04446014e-02,  0.00000000e+00,  0.00000000e+00,
  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00, -1.57946833e-01, -2.55728087e-01,  4.16831100e-02, -3.71205251e-01,  9.61490000e-01,  4.33293945e-01,  0.00000000e+00,  0.00000000e+00,
  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  4.65961274e-01, -4.46193339e-02, -4.78183566e-02, -5.90529546e-01,  7.89586139e-01, -5.27094474e-01,  0.00000000e+00,  0.00000000e+00,
  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00, -2.15821618e-01, -1.50420097e-01, -8.29543305e-02, -5.64079190e-02,  1.10130463e+00, -1.84245131e-01,  0.00000000e+00,  0.00000000e+00,
  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00, -8.62446094e-02,  1.33448025e-01,  7.39853356e-02,  5.64079190e-02, -1.10130463e+00,  1.84245131e-01,  0.00000000e+00,  0.00000000e+00,
  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00, -4.05453718e-01,  2.39248788e-01,  2.71583214e-01,  5.90529546e-01, -7.89586139e-01,  5.27094474e-01,  0.00000000e+00,  0.00000000e+00,
  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00, -2.83698241e-02,  2.90165228e-01, -2.77718460e-01,  3.71205251e-01, -9.61490000e-01, -4.33293945e-01,  0.00000000e+00,  0.00000000e+00,
  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00, -3.47578932e-01,  3.95965991e-01, -8.01205823e-02,  9.05326878e-01, -6.49771512e-01, -9.04446014e-02,  0.00000000e+00,  0.00000000e+00,
  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  1.00000000e+00,  0.00000000e+00,
  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00, -1.00000000e+00,  0.00000000e+00,
  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  1.00000000e+00,
  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00, -1.00000000e+00;

   pdPtr_->getf()<<
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
 100000.,
 100000.,
 100000.,
 100000.;
    pdPtr_->getA().resize(assumptionSize + 2, GM_SIZE * numContact + 2);
    pdPtr_->getA().setZero();
    pdPtr_->getB().resize(assumptionSize + 2);
    pdPtr_->getB().setZero();


    pdPtr_->getA()<<
  1.89350760e-03,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00, -2.42706665e-03,  0.00000000e+00,  1.89350760e-03,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00, -2.42706665e-03,  0.00000000e+00,  1.89350760e-03,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00, -2.42706665e-03,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
  0.00000000e+00,  1.89350760e-03,  0.00000000e+00,  2.42706665e-03,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  1.89350760e-03,  0.00000000e+00,  2.42706665e-03,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  1.89350760e-03,  0.00000000e+00,  2.42706665e-03,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
  0.00000000e+00,  0.00000000e+00,  1.89350760e-03,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  1.89350760e-03,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  1.89350760e-03,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
  9.70826659e-05, -1.21353332e-04,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  2.42706665e-03,  9.70826659e-05, -1.21353332e-04,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  2.42706665e-03,  9.70826659e-05, -1.21353332e-04,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  2.42706665e-03,  0.00000000e+00,  0.00000000e+00,
  2.96062570e-03,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  2.96062570e-03,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  2.96062570e-03,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00, -1.00000000e+00,  0.00000000e+00,
  0.00000000e+00,  2.96062570e-03,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  2.96062570e-03,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  2.96062570e-03,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00, -1.00000000e+00;

    pdPtr_->getB()<<
  0.05    ,
  0.04    ,
  0.780163,
  0.      ,
 -0.05    ,
 -0.04    ;


  // clang-format on
  */

  // Hard-code the case: `python zmp_support_area.py --stance=stances/hrp4-triple-pose-initial.json --robot=hrp4`
  /*
  // clang-format off
   pdPtr_->getF().resize(numContact * rowCWC + 4, numContact * colCWC + 2);
    pdPtr_->getF().setZero();
    pdPtr_->getf().resize(numContact * rowCWC + 4);
    pdPtr_->getf().setZero();

    pdPtr_->getF()<<
        1.00004223e+00, -8.39840090e-04, -4.94888704e-01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00, 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
       -9.99957583e-01, -1.68368013e-03, -4.95057570e-01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00, 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
       -3.79378928e-04,  9.98734902e-01, -4.97522313e-01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00, 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
        4.64027902e-04, -1.00125842e+00, -4.92423961e-01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00, 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
        5.55804446e-06, -1.66137440e-04, -6.49930639e-02,  9.99999907e-01,  4.21920019e-04,  8.44331097e-05,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00, 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
        5.55804446e-06, -1.65250808e-04, -6.50065133e-02, -9.99999907e-01, -4.21920019e-04, -8.44331097e-05,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00, 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
        9.81791716e-06, -3.05896844e-04, -1.19954438e-01, -4.21703415e-04,  9.99996662e-01, -2.54917621e-03,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00, 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
        1.07040932e-05, -3.05896844e-04, -1.20044782e-01,  4.21703415e-04, -9.99996662e-01,  2.54917621e-03,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00, 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
        6.49506286e-02,  1.19748647e-01, -9.18961309e-02, -4.94680460e-01, -4.97731075e-01, -9.98776762e-01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00, 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
        6.50513988e-02, -1.20250552e-01, -9.12396105e-02, -4.95097925e-01,  4.92215114e-01, -1.00130032e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00, 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
       -6.50493594e-02,  1.19693358e-01, -9.19004501e-02,  4.95268942e-01, -4.97313395e-01, -9.98693177e-01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00, 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
       -6.49485892e-02, -1.20305841e-01, -9.12439297e-02,  4.94851477e-01,  4.92632794e-01, -1.00121673e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00, 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
       -6.49345299e-02, -1.20215059e-01, -9.12953050e-02, -4.94851477e-01, -4.92632794e-01,  1.00121673e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00, 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
       -6.50361773e-02,  1.19784140e-01, -9.18623891e-02, -4.95268942e-01,  4.97313395e-01,  9.98693177e-01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00, 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
        6.50654581e-02, -1.20160648e-01, -9.12776715e-02,  4.95097925e-01, -4.92215114e-01,  1.00130032e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00, 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
        6.49638106e-02,  1.19838551e-01, -9.18447557e-02,  4.94680460e-01,  4.97731075e-01,  9.98776762e-01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00, 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
        0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  9.99588167e-01,  5.55767856e-04, -4.95805595e-01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00, 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
        0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00, -1.00041095e+00,  1.43147848e-03, -4.94141562e-01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00, 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
        0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  2.81333874e-05,  1.00099151e+00, -4.92966521e-01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00, 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
        0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00, -8.50915586e-04, -9.99004266e-01, -4.96980636e-01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00, 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
        0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00, -5.40238096e-05,  1.30945922e-04, -6.49334544e-02,  9.99999558e-01, -4.37855313e-04, -8.32016089e-04,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00, 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
        0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00, -5.40238096e-05,  1.30018930e-04, -6.50662388e-02, -9.99999558e-01,  4.37855313e-04,  8.32016089e-04,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00, 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
        0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00, -9.92710008e-05,  2.40890633e-04, -1.20038077e-01,  4.39524487e-04,  9.99997889e-01,  2.00705714e-03,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00, 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
        0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00, -1.00201527e-04,  2.40890633e-04, -1.19961357e-01, -4.39524487e-04, -9.99997889e-01, -2.00705714e-03,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00, 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
        0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  6.49100546e-02,  1.20193244e-01, -9.13972214e-02, -4.96023217e-01, -4.92749553e-01, -1.00057926e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00, 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
        0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  6.48050293e-02, -1.19806249e-01, -9.19168897e-02, -4.95588110e-01,  4.97197851e-01, -9.98592370e-01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00, 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
        0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00, -6.50898879e-02,  1.20250624e-01, -9.12233344e-02,  4.93925839e-01, -4.93183007e-01, -1.00140291e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00, 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
        0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00, -6.51949132e-02, -1.19748869e-01, -9.17430026e-02,  4.94360946e-01,  4.96764397e-01, -9.99416024e-01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00, 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
        0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00, -6.50627299e-02, -1.19826062e-01, -9.17707530e-02, -4.94360946e-01, -4.96764397e-01,  9.99416024e-01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00, 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
        0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00, -6.49567834e-02,  1.20173431e-01, -9.13270339e-02, -4.93925839e-01,  4.93183007e-01,  1.00140291e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00, 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
        0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  6.49372126e-02, -1.19882525e-01, -9.18131902e-02,  4.95588110e-01, -4.97197851e-01,  9.98592370e-01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00, 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
        0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  6.50431591e-02,  1.20116969e-01, -9.13694710e-02,  4.96023217e-01,  4.92749553e-01,  1.00057926e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00, 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
        0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00, -4.11644291e-02,  1.02694087e+00, -4.34393752e-01,  0.00000000e+00,  0.00000000e+00, 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
        0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00, -3.65458326e-01, -9.46361406e-01, -4.64586161e-01,  0.00000000e+00,  0.00000000e+00, 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
        0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00, -1.10052483e+00,  1.81335707e-01, -3.10236383e-02,  0.00000000e+00,  0.00000000e+00, 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
        0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  6.93902072e-01, -1.00756239e-01, -8.67956275e-01,  0.00000000e+00,  0.00000000e+00, 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
        0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00, -1.64300404e-02, -6.58590669e-01, -4.01223580e-02,  1.62146949e-01,  9.86651140e-01, 1.50962041e-02,  0.00000000e+00,  0.00000000e+00,
        0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00, -1.64300404e-02,  6.65102473e-01, -3.25261897e-02, -1.62146949e-01, -9.86651140e-01,-1.50962041e-02,  0.00000000e+00,  0.00000000e+00,
        0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00, -6.26496740e-01,  4.88385324e-03, -9.16796135e-02, -8.97213449e-01,  1.41045973e-01, 4.18466318e-01,  0.00000000e+00,  0.00000000e+00,
        0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  5.77206618e-01,  4.88385324e-03, -1.72932081e-02,  8.97213449e-01, -1.41045973e-01,-4.18466318e-01,  0.00000000e+00,  0.00000000e+00,
        0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  1.26881647e-01,  3.86789715e-01,  1.05248343e-03, -4.69116559e-02, -4.76784039e-01,-1.12270935e+00,  0.00000000e+00,  0.00000000e+00,
        0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00, -3.61255504e-01,  3.69864198e-01, -8.59828669e-02, -9.35107656e-01, -3.37155649e-01,-7.08448827e-01,  0.00000000e+00,  0.00000000e+00,
        0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  1.13909891e-01, -3.47337055e-01, -3.91512440e-03,  1.13605634e-01,  4.99950757e-01,-1.10776487e+00,  0.00000000e+00,  0.00000000e+00,
        0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00, -3.74227260e-01, -3.64262571e-01, -9.09504747e-02, -7.74590366e-01,  6.39579147e-01,-6.93504347e-01,  0.00000000e+00,  0.00000000e+00,
        0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  4.28258842e-01,  2.76462910e-01, -5.03711711e-02,  7.74590366e-01, -6.39579147e-01, 6.93504347e-01,  0.00000000e+00,  0.00000000e+00,
        0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00, -2.75209537e-01,  2.93388427e-01, -3.69746050e-02, -1.13605634e-01, -4.99950757e-01, 1.10776487e+00,  0.00000000e+00,  0.00000000e+00,
        0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  4.41230598e-01, -2.99799677e-01, -5.29233863e-02,  9.35107656e-01,  3.37155649e-01, 7.08448827e-01,  0.00000000e+00,  0.00000000e+00,
        0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00, -2.62237781e-01, -2.82874160e-01, -3.95268202e-02,  4.69116559e-02,  4.76784039e-01, 1.12270935e+00,  0.00000000e+00,  0.00000000e+00,
        0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00, 0.00000000e+00,  1.00000000e+00,  0.00000000e+00,
        0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00, 0.00000000e+00, -1.00000000e+00,  0.00000000e+00,
        0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00, 0.00000000e+00,  0.00000000e+00,  1.00000000e+00,
        0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00, 0.00000000e+00,  0.00000000e+00, -1.00000000e+00;

    pdPtr_->getf()<<
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
 100000.,
 100000.,
 100000.,
 100000.;
    pdPtr_->getA().resize(assumptionSize + 2, GM_SIZE * numContact + 2);
    pdPtr_->getA().setZero();
    pdPtr_->getB().resize(assumptionSize + 2);
    pdPtr_->getB().setZero();


    pdPtr_->getA()<<
        1.89496141e-03,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00, -2.42706665e-03,  0.00000000e+00,  1.89496141e-03,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00, -2.42706665e-03,  0.00000000e+00,  1.89496141e-03,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00, -2.42706665e-03,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
        0.00000000e+00,  1.89496141e-03,  0.00000000e+00,  2.42706665e-03,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  1.89496141e-03,  0.00000000e+00,  2.42706665e-03,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  1.89496141e-03,  0.00000000e+00,  2.42706665e-03,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
        0.00000000e+00,  0.00000000e+00,  1.89496141e-03,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  1.89496141e-03,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  1.89496141e-03,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
        9.70826659e-05, -1.21353332e-04,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  2.42706665e-03,  9.70826659e-05, -1.21353332e-04,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  2.42706665e-03,  9.70826659e-05, -1.21353332e-04,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  2.42706665e-03,  0.00000000e+00,  0.00000000e+00,
        2.95917188e-03,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  2.95917188e-03,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  2.95917188e-03,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00, -1.00000000e+00,  0.00000000e+00,
        0.00000000e+00,  2.95917188e-03,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  2.95917188e-03,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  2.95917188e-03,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00, -1.00000000e+00;

      pdPtr_->getB()<<
  0.05    ,
  0.04    ,
  0.780163,
  0.      ,
 -0.05    ,
 -0.04    ;

  // clang-format on

  */
  // pdPtr_->getB() << -getRobot().com().x(), -getRobot().com().y();

	  /*
  std::cout << "A matrix is: " << std::endl << pdPtr_->getA() << std::endl;
  std::cout << "A matrix size is: " << std::endl << pdPtr_->getA().rows() << ", " << pdPtr_->getA().cols() << std::endl;
  std::cout << "B vector is: " << std::endl << pdPtr_->getB().transpose() << std::endl;
  std::cout << "B vector size is: " << std::endl << pdPtr_->getB().size() << std::endl;

  std::cout << "F matrix is: " << std::endl << pdPtr_->getF() << std::endl;
  std::cout << "F matrix size is: " << std::endl << pdPtr_->getF().rows() << ", " << pdPtr_->getF().cols() << std::endl;
  std::cout << "f vector is: " << std::endl << pdPtr_->getf().transpose() << std::endl;
  std::cout << "f vector size is: " << std::endl << pdPtr_->getf().size() << std::endl;

  std::cout << "Intermediate: Matrix  G is: " << std::endl << G << std::endl;

  */

  polytopeProjectorPtr_ = std::make_shared<StaticStabilityPolytope>(pdPtr_, getParams().iterationLimit,
                                                                    getParams().convergeThreshold, GLPK);

  polytopeProjectorPtr_->initSolver();

  polytopeProjectorPtr_->projectionStabilityPolyhedron();

  //numVertex_ = static_cast<int>(polytopeProjectorPtr_->getInnerVertices().size());

  polygonVertices_.clear();


  if(getParams().debug)
  {
    std::cerr<< red<<"The stabiliPlus vertices are: " <<reset<< std::endl;

    for(auto & point : polytopeProjectorPtr_->getInnerVertices())
    {
	    std::cerr<<green<< point.transpose() << reset<<std::endl;
    }
    std::cerr<< red<< "End of StabiliPlus verticies." << reset<<std::endl;

  }


  // Construct the matrices:
  /*
  pointsToInequalityMatrix<Point>(polytopeProjectorPtr_->getInnerVertices(), ieqConstraintBlocks_.G_zmp,
                                        ieqConstraintBlocks_.h_zmp, polygonVertices_, LOWER_SLOPE, UPPER_SLOPE);
					*/
  polygonVertices_ = polytopeProjectorPtr_->getInnerVertices();
  //std::vector<Eigen::Vector2d> newPoints = polytopeProjectorPtr_->getInnerVertices();


  removeDuplicates(polygonVertices_);
  //std::cerr<< "The filtered vertices are: " << std::endl;
  pointsToInequalityMatrix<Point>(polygonVertices_, ieqConstraintBlocks_.G_zmp,
                                        ieqConstraintBlocks_.h_zmp, LOWER_SLOPE, UPPER_SLOPE);


  if(getParams().debug)
  {
    std::cerr<< cyan<<"The projected vertices are: " <<reset<< std::endl;
    for(auto & point : polygonVertices_)
    {
	    std::cerr<< point.transpose() << std::endl;
    }
    std::cerr<< "--------------------------------" << std::endl;
  }

}


template<typename Point>
void McZMPArea<Point>::updateLIPMAssumptions_(int numContact, const Eigen::MatrixXd & inputG)
{

  // Set the vector d:
  pdPtr_->getB().head<3>() = getRobot().com();

  // Calculate matrix C:
  Eigen::Matrix3d crossUz = crossMatrix(Eigen::Vector3d::UnitZ());

  Eigen::MatrixXd B;
  B.resize(4, 6);
  B.setZero();
  if(getParams().useSpatialVectorAlgebra)
  {
  B.block<3, 3>(0, 3).setIdentity();
  B.block<3, 3>(0, 3) *= getRobot().com().z();
  B.block<3, 3>(0, 0) = crossUz;

  B.block<1, 3>(3, 3) = -(crossUz * getRobot().com()).transpose();
  B.block<1, 3>(3, 0) = Eigen::Vector3d::UnitZ().transpose();
  }
  else
  {
  B.block<3, 3>(0, 0).setIdentity();
  B.block<3, 3>(0, 0) *= getRobot().com().z();
  B.block<3, 3>(0, 3) = crossUz;


  B.block<1, 3>(3, 0) = -(crossUz * getRobot().com()).transpose();
  B.block<1, 3>(3, 3) = Eigen::Vector3d::UnitZ().transpose();
  }

  // the same for both cases:
  pdPtr_->getA().block(0, 0, 4, GM_SIZE * numContact) = 1.0 / (getRobot().mass() * 9.81) * (B * inputG);

  if(getParams().debug)
  {
    std::cerr<< "Intermediate: Matrix  B is: " << std::endl << B << std::endl;
  }
}

// Instantiate the McZMPArea
//template class mc_impact::McZMPArea<Eigen::Vector3d>;
template class mc_impact::McZMPArea<Eigen::Vector2d>;
}
